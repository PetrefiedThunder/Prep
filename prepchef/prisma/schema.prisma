// PrepChef Database Schema (Prisma)
// Generated from prepchef/db/schema.sql

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  admin
  host
  renter
  support
}

enum BookingStatus {
  requested
  awaiting_docs
  payment_authorized
  confirmed
  active
  completed
  canceled
  no_show
  disputed
}

enum CertificationType {
  health_permit
  business_license
  food_handler
  insurance
  fire_safety
}

enum DocumentStatus {
  pending
  approved
  rejected
  expired
}

enum PaymentStatus {
  pending
  authorized
  captured
  refunded
  failed
}

// Models
model User {
  id                       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                    String    @unique @db.Citext
  username                 String    @unique @db.Citext
  passwordHash             String    @map("password_hash")
  fullName                 String    @map("full_name")
  phone                    String?
  role                     UserRole  @default(renter)
  verified                 Boolean   @default(false)
  verificationToken        String?   @map("verification_token")
  verificationExpiresAt    DateTime? @map("verification_expires_at") @db.Timestamptz
  stripeCustomerId         String?   @map("stripe_customer_id")
  stripeConnectAccountId   String?   @map("stripe_connect_account_id")
  profileData              Json      @default("{}") @db.JsonB
  lastLoginAt              DateTime? @map("last_login_at") @db.Timestamptz
  createdAt                DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt                DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt                DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  businesses               Business[]
  bookings                 Booking[]
  reviews                  Review[]
  messagesSent             Message[] @relation("SentMessages")
  messagesReceived         Message[] @relation("ReceivedMessages")
  notifications            Notification[]
  auditLogs                AuditLog[]
  verifiedDocuments        ComplianceDocument[] @relation("DocumentVerifier")
  canceledBookings         Booking[] @relation("BookingCanceler")
  accessGrantsRevoked      AccessGrant[] @relation("AccessGrantRevoker")

  @@map("users")
}

model Business {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ownerId         String    @map("owner_id") @db.Uuid
  name            String
  legalName       String    @map("legal_name")
  taxId           String?   @map("tax_id")
  address         Json      @db.JsonB
  phone           String
  email           String    @db.Citext
  website         String?
  description     String?
  logoUrl         String?   @map("logo_url")
  verified        Boolean   @default(false)
  stripeAccountId String?   @map("stripe_account_id")
  commissionRate  Decimal   @default(0.20) @map("commission_rate") @db.Decimal(3, 2)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  venues          Venue[]

  @@map("businesses")
}

model Venue {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  businessId    String    @map("business_id") @db.Uuid
  name          String
  address       Json      @db.JsonB
  // Note: PostGIS GEOGRAPHY type not directly supported, using String for now
  location      String?   @db.Text
  timezone      String    @default("America/Los_Angeles")
  phone         String?
  email         String?   @db.Citext
  capacity      Int?
  squareFootage Int?      @map("square_footage")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt     DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  business      Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  listings      KitchenListing[]

  @@map("venues")
}

model KitchenListing {
  id                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  venueId               String    @map("venue_id") @db.Uuid
  title                 String
  description           String?
  kitchenType           String[]  @map("kitchen_type")
  equipment             Json      @default("[]") @db.JsonB
  certifications        Json      @default("[]") @db.JsonB
  photos                String[]  @default([])
  videoUrl              String?   @map("video_url")

  // Pricing
  hourlyRateCents       Int       @map("hourly_rate_cents")
  dailyRateCents        Int?      @map("daily_rate_cents")
  weeklyRateCents       Int?      @map("weekly_rate_cents")
  monthlyRateCents      Int?      @map("monthly_rate_cents")
  minimumHours          Int       @default(2) @map("minimum_hours")
  cleaningFeeCents      Int       @default(0) @map("cleaning_fee_cents")
  securityDepositCents  Int       @default(0) @map("security_deposit_cents")

  // Availability rules
  advanceNoticeHours    Int       @default(24) @map("advance_notice_hours")
  maxBookingHours       Int       @default(24) @map("max_booking_hours")
  cancellationPolicy    Json?     @map("cancellation_policy") @db.JsonB

  // Features
  features              String[]
  restrictions          String[]
  accessibilityFeatures String[]  @map("accessibility_features")

  // Status
  isActive              Boolean   @default(true) @map("is_active")
  isFeatured            Boolean   @default(false) @map("is_featured")
  viewCount             Int       @default(0) @map("view_count")
  averageRating         Decimal?  @map("average_rating") @db.Decimal(2, 1)
  totalReviews          Int       @default(0) @map("total_reviews")

  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt             DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  venue                 Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  availabilityWindows   AvailabilityWindow[]
  bookings              Booking[]
  reviews               Review[]
  messages              Message[]

  @@map("kitchen_listings")
}

model AvailabilityWindow {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  listingId   String    @map("listing_id") @db.Uuid
  dayOfWeek   Int?      @map("day_of_week")
  startTime   DateTime  @map("start_time") @db.Time
  endTime     DateTime  @map("end_time") @db.Time
  startDate   DateTime? @map("start_date") @db.Date
  endDate     DateTime? @map("end_date") @db.Date
  isRecurring Boolean   @default(true) @map("is_recurring")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  listing     KitchenListing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("availability_windows")
}

model ComplianceDocument {
  id                String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entityType        String            @map("entity_type")
  entityId          String            @map("entity_id") @db.Uuid
  documentType      CertificationType @map("document_type")
  documentUrl       String            @map("document_url")
  documentNumber    String?           @map("document_number")
  issuingAuthority  String?           @map("issuing_authority")
  issueDate         DateTime?         @map("issue_date") @db.Date
  expiryDate        DateTime          @map("expiry_date") @db.Date
  status            DocumentStatus    @default(pending)
  verifiedBy        String?           @map("verified_by") @db.Uuid
  verifiedAt        DateTime?         @map("verified_at") @db.Timestamptz
  rejectionReason   String?           @map("rejection_reason")
  metadata          Json              @default("{}") @db.JsonB
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  verifier          User?             @relation("DocumentVerifier", fields: [verifiedBy], references: [id])

  @@unique([entityType, entityId, documentType])
  @@map("compliance_documents")
}

model Booking {
  id                     String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  listingId              String        @map("listing_id") @db.Uuid
  renterId               String        @map("renter_id") @db.Uuid

  // Time slots
  startTime              DateTime      @map("start_time") @db.Timestamptz
  endTime                DateTime      @map("end_time") @db.Timestamptz

  // Status
  status                 BookingStatus @default(requested)

  // Pricing
  hourlyRateCents        Int           @map("hourly_rate_cents")
  subtotalCents          Int           @map("subtotal_cents")
  cleaningFeeCents       Int           @default(0) @map("cleaning_fee_cents")
  serviceFeeCents        Int           @map("service_fee_cents")
  taxCents               Int           @default(0) @map("tax_cents")
  totalCents             Int           @map("total_cents")
  securityDepositCents   Int           @default(0) @map("security_deposit_cents")

  // Payment
  stripePaymentIntentId  String?       @map("stripe_payment_intent_id")
  paymentStatus          PaymentStatus @default(pending) @map("payment_status")
  paidAt                 DateTime?     @map("paid_at") @db.Timestamptz

  // Additional info
  guestCount             Int           @default(1) @map("guest_count")
  purpose                String?
  specialRequests        String?       @map("special_requests")

  // Cancellation
  canceledBy             String?       @map("canceled_by") @db.Uuid
  canceledAt             DateTime?     @map("canceled_at") @db.Timestamptz
  cancellationReason     String?       @map("cancellation_reason")
  refundAmountCents      Int?          @map("refund_amount_cents")

  createdAt              DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  listing                KitchenListing @relation(fields: [listingId], references: [id])
  renter                 User           @relation(fields: [renterId], references: [id])
  canceler               User?          @relation("BookingCanceler", fields: [canceledBy], references: [id])
  accessGrants           AccessGrant[]
  review                 Review?
  messages               Message[]

  @@map("bookings")
}

model AccessGrant {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bookingId  String    @map("booking_id") @db.Uuid
  accessCode String    @map("access_code")
  accessType String    @default("pin") @map("access_type")
  validFrom  DateTime  @map("valid_from") @db.Timestamptz
  validUntil DateTime  @map("valid_until") @db.Timestamptz
  maxUses    Int?      @map("max_uses")
  timesUsed  Int       @default(0) @map("times_used")
  revoked    Boolean   @default(false)
  revokedAt  DateTime? @map("revoked_at") @db.Timestamptz
  revokedBy  String?   @map("revoked_by") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  booking    Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  revoker    User?     @relation("AccessGrantRevoker", fields: [revokedBy], references: [id])

  @@map("access_grants")
}

model Review {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bookingId          String    @unique @map("booking_id") @db.Uuid
  reviewerId         String    @map("reviewer_id") @db.Uuid
  listingId          String    @map("listing_id") @db.Uuid

  // Ratings (1-5 scale)
  overallRating      Int       @map("overall_rating")
  cleanlinessRating  Int?      @map("cleanliness_rating")
  equipmentRating    Int?      @map("equipment_rating")
  locationRating     Int?      @map("location_rating")
  valueRating        Int?      @map("value_rating")

  title              String?
  comment            String?
  photos             String[]

  // Response from host
  hostResponse       String?   @map("host_response")
  hostRespondedAt    DateTime? @map("host_responded_at") @db.Timestamptz

  isVerified         Boolean   @default(true) @map("is_verified")
  isFeatured         Boolean   @default(false) @map("is_featured")
  helpfulCount       Int       @default(0) @map("helpful_count")

  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt          DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  booking            Booking        @relation(fields: [bookingId], references: [id])
  reviewer           User           @relation(fields: [reviewerId], references: [id])
  listing            KitchenListing @relation(fields: [listingId], references: [id])

  @@map("reviews")
}

model Message {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversationId String    @map("conversation_id") @db.Uuid
  senderId       String    @map("sender_id") @db.Uuid
  recipientId    String    @map("recipient_id") @db.Uuid
  listingId      String?   @map("listing_id") @db.Uuid
  bookingId      String?   @map("booking_id") @db.Uuid

  subject        String?
  body           String
  isRead         Boolean   @default(false) @map("is_read")
  readAt         DateTime? @map("read_at") @db.Timestamptz

  attachments    Json      @default("[]") @db.JsonB

  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  sender         User           @relation("SentMessages", fields: [senderId], references: [id])
  recipient      User           @relation("ReceivedMessages", fields: [recipientId], references: [id])
  listing        KitchenListing? @relation(fields: [listingId], references: [id])
  booking        Booking?        @relation(fields: [bookingId], references: [id])

  @@map("messages")
}

model Notification {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  type         String
  title        String
  body         String
  data         Json      @default("{}") @db.JsonB

  isRead       Boolean   @default(false) @map("is_read")
  readAt       DateTime? @map("read_at") @db.Timestamptz

  // Delivery channels
  emailSent    Boolean   @default(false) @map("email_sent")
  emailSentAt  DateTime? @map("email_sent_at") @db.Timestamptz
  pushSent     Boolean   @default(false) @map("push_sent")
  pushSentAt   DateTime? @map("push_sent_at") @db.Timestamptz
  smsSent      Boolean   @default(false) @map("sms_sent")
  smsSentAt    DateTime? @map("sms_sent_at") @db.Timestamptz

  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String?   @map("user_id") @db.Uuid
  action     String
  entityType String?   @map("entity_type")
  entityId   String?   @map("entity_id") @db.Uuid
  oldValues  Json?     @map("old_values") @db.JsonB
  newValues  Json?     @map("new_values") @db.JsonB
  ipAddress  String?   @map("ip_address") @db.Inet
  userAgent  String?   @map("user_agent")
  metadata   Json      @default("{}") @db.JsonB
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user       User?     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
