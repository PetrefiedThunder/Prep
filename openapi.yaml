# OpenAPI Specification (J32)
openapi: 3.0.3
info:
  title: PrepChef API
  description: Commercial kitchen marketplace API
  version: 1.0.0
  contact:
    email: api@prepchef.com
  license:
    name: MIT

servers:
  - url: https://api.prepchef.com/v1
    description: Production
  - url: https://staging-api.prepchef.com/v1
    description: Staging
  - url: http://localhost:3000/v1
    description: Local development

tags:
  - name: Bookings
    description: Kitchen booking operations
  - name: Payments
    description: Payment and refund operations
  - name: Listings
    description: Kitchen listings
  - name: Health
    description: Health check endpoints

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /api/bookings:
    post:
      tags: [Bookings]
      summary: Create a booking
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingRequest'
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseEnvelope'
        '409':
          description: Kitchen not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseEnvelope'

  /api/bookings/{id}:
    get:
      tags: [Bookings]
      summary: Get booking by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Booking found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found

  /api/bookings/{id}/refund:
    post:
      tags: [Payments]
      summary: Refund a booking
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: Refund processed
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseEnvelope'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseEnvelope'

  /webhooks/stripe:
    post:
      tags: [Payments]
      summary: Stripe webhook handler
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook received

  /api/v1/platform/reviews/kitchens/{kitchen_id}:
    get:
      tags: [Listings]
      summary: List reviews for a kitchen
      parameters:
        - name: kitchen_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Cursor returned by a previous request
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of reviews to return
      responses:
        '200':
          description: Paginated reviews
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCollection'
        '404':
          description: Kitchen not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseEnvelope'

  /v1:
    get:
      tags: [Health]
      summary: API versioning guidance
      responses:
        '200':
          description: Version metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionMetadata'

components:
  schemas:
    CreateBookingRequest:
      type: object
      required:
        - kitchen_id
        - user_id
        - start_time
        - end_time
      properties:
        kitchen_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time

    Booking:
      type: object
      properties:
        booking_id:
          type: string
          format: uuid
        kitchen_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, confirmed, cancelled, rejected]
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    RefundRequest:
      type: object
      properties:
        amount_cents:
          type: integer
          minimum: 1
        reason:
          type: string
          enum: [requested_by_customer, duplicate, fraudulent]

    HealthStatus:
      type: object
      properties:
        ok:
          type: boolean
        service:
          type: string
        timestamp:
          type: string
          format: date-time
        checks:
          type: object

    ErrorDetail:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: Machine readable error identifier
        message:
          type: string
          description: Human readable error description
        field:
          type: string
          nullable: true
          description: Optional field associated with the error

    ErrorResponseEnvelope:
      type: object
      required: [request_id, error]
      properties:
        request_id:
          type: string
          description: Correlated identifier for the request
        error:
          $ref: '#/components/schemas/ErrorDetail'
        meta:
          type: object
          nullable: true
          additionalProperties: true

    CursorPagination:
      type: object
      required: [limit, total]
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 100
        cursor:
          type: string
          format: date-time
          nullable: true
        next_cursor:
          type: string
          format: date-time
          nullable: true
        total:
          type: integer
          minimum: 0

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        booking_id:
          type: string
          format: uuid
        kitchen_id:
          type: string
          format: uuid
        host_id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid
        rating:
          type: number
          format: float
        comment:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    ReviewCollection:
      type: object
      required: [items, pagination]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        pagination:
          $ref: '#/components/schemas/CursorPagination'

    VersionMetadata:
      type: object
      required: [current_version, recommended_base_path, sunset, deprecation_policy]
      properties:
        current_version:
          type: string
        recommended_base_path:
          type: string
        sunset:
          type: string
          description: ISO8601 sunset timestamp
        deprecation_policy:
          type: string
          description: Narrative explaining version deprecation expectations

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      schema:
        type: string
      description: Unique key guaranteeing idempotent POST and PUT requests

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
