version: 1
project: "Prep — Operational Readiness & Onboarding"
owner: "PetrefiedThunder"
defaults:
  labels: [sprint:op-readiness, codex, priority-high]
  estimate: 3
  reviewers: [PetrefiedThunder]

epics:

  - name: EPIC 1 — Data Ingestion & Synchronization
    description: Activate municipal/federal ingestion with provenance, scheduling, and health checks.
    issues:
      - title: Create civic adapters for SF/PDX/SEA
        labels: [etl, data, ingestion]
        estimate: 5
        body: |
          Paths:
            - etl/adapters/civic.py
            - etl/adapters/common.py
          Tasks:
            - Implement fetchers for: SF OpenData (permits, inspections), Portland Civic (commissary/inspections), King County/Seattle (permits, TFE).
            - Normalize to tables: permits, inspections, facility_zoning.
            - Add source_url + fetch_timestamp to each upsert.
          Acceptance:
            - pytest tests/etl/test_civic_adapters.py passes (>= 90% coverage)
            - Running `python -m etl.adapters.civic --city san_francisco` inserts/updates ≥1 row in each target table.

      - title: State/County adapters + schema validators
        labels: [etl, validator]
        body: |
          Paths:
            - etl/adapters/state.py
            - tools/schema_validators.py
          Tasks:
            - Parse state-level license datasets (CA, OR, WA).
            - Build validators for required fields per jurisdiction (license_no, expires_at).
          Acceptance:
            - `pytest tests/etl/test_state_adapters.py` green
            - Validator rejects malformed rows and logs to provenance_ledger.

      - title: Schedule ETL with Airflow/Dagster + freshness SLO
        labels: [etl, dags, ops]
        body: |
          Paths:
            - dags/city_refresh_dag.py
            - scripts/check_manifest_freshness.py
          Tasks:
            - Nightly refresh for SF/PDX/SEA; weekly for others.
            - Freshness check fails CI if latest effective_date > 48h old.
          Acceptance:
            - GitHub Action "Nightly ETL & Freshness" completes; if stale, workflow fails with exit code 2.
            - Grafana panel shows `reg_manifest_effective_date_seconds` per city.

      - title: Provenance ledger for regulatory updates
        labels: [db, compliance, audit]
        body: |
          Paths:
            - migrations/07_provenance_ledger.sql
            - gaap_ledger_porter/provenance_writer.py
          Tasks:
            - Create provenance_ledger table (entity, op, source_url, checksum, user/job_id, ts).
            - Write records from all adapters.
          Acceptance:
            - `SELECT COUNT(*) FROM provenance_ledger` increments after ETL.
            - Duplicate payloads (same checksum) are idempotent (no new row).

  - name: EPIC 2 — Host Onboarding (Business/Kitchen)
    description: Multi-step host onboarding with permits, COI OCR, zoning, and Stripe Connect.
    issues:
      - title: Host onboarding API + workflow engine
        labels: [api, backend, onboarding]
        estimate: 5
        body: |
          Paths:
            - onboarding/host_flow.py
            - api/onboarding/host.py
          Tasks:
            - Steps: KYB (EIN/license), permits upload, COI OCR, zoning capture, Stripe Connect link.
            - Persist to kitchens, permits, compliance_documents, facility_zoning.
          Acceptance:
            - `POST /onboarding/host` returns {host_id, next_step}
            - Golden tests in tests/onboarding/test_host_flow.py all pass.

      - title: COI OCR & additional insured validation (city-aware)
        labels: [insurance, compliance, backend]
        body: |
          Paths:
            - integrations/insurance/coi_parser.py
            - api/documents/coi.py
          Tasks:
            - Extract GL + aggregate limits; detect required AI phrase from city pack.
          Acceptance:
            - Mocks in tests/insurance/test_coi_parser.py prove: pass, wrong-phrase DENY, limit too low DENY.

      - title: Host onboarding UI (Next.js wizard)
        labels: [frontend, onboarding, ui]
        body: |
          Paths:
            - apps/harborhomes/app/onboarding/host/*
          Tasks:
            - 4-step wizard with progress, doc uploads, inline rule guidance.
          Acceptance:
            - Lighthouse score ≥ 90 desktop; wizard completes to success screen.
            - Accessibility: axe checks pass in CI.

  - name: EPIC 3 — Maker Onboarding (Entrepreneur)
    description: Maker profile + permits/insurance with dynamic municipal checklist.
    issues:
      - title: Maker onboarding API + checklist generator
        labels: [api, compliance]
        body: |
          Paths:
            - onboarding/maker_flow.py
            - api/onboarding/maker.py
            - api/compliance/checklist.py
          Tasks:
            - Generate city/product-specific checklist using regengine/cities/* configs.
          Acceptance:
            - `POST /onboarding/maker` returns {maker_id, checklist[]}
            - Tests in tests/onboarding/test_maker_flow.py pass.

      - title: Maker onboarding UI (portfolio-lite + doc capture)
        labels: [frontend, onboarding]
        body: |
          Paths:
            - apps/harborhomes/app/onboarding/maker/*
          Tasks:
            - Minimal bio + categories + required docs; progress save.
          Acceptance:
            - E2E Playwright test creates a maker and reaches checklist.

  - name: EPIC 4 — Compliance Kernel Bridge (Municipal Delta → Checkout)
    description: Enforce city packs at booking confirm with precise reasons.
    issues:
      - title: Policy evaluation adapter at booking confirm
        labels: [backend, compliance, booking]
        estimate: 5
        body: |
          Paths:
            - apps/policy/evaluator_adapter.py
            - api/bookings/confirm_hook.py
          Tasks:
            - Call kernel with {city, permits, zoning, insurance, calendars}; return ALLOW|CONDITIONS|DENY + reason codes.
          Acceptance:
            - Golden scenarios (tests/test_municipal_golden.py) >= 30 cases pass.
            - Booking is blocked with human-readable remediation when DENY.

      - title: City-aware messages & docs linkouts
        labels: [frontend, ux, docs]
        body: |
          Paths:
            - apps/harborhomes/components/ComplianceOutcome.tsx
            - docs/city_summaries/*
          Tasks:
            - Map reason codes → copy + links to permit templates/guides.
          Acceptance:
            - Playwright checks that each reason renders a link to the correct city summary or template.

  - name: EPIC 5 — Calendars & Conflict Windows
    description: Merge inspections, maintenance, seasonal restrictions into availability.
    issues:
      - title: Conflict engine: inspections & maintenance
        labels: [scheduling, backend]
        body: |
          Paths:
            - apps/scheduling/conflict_resolver.py
          Tasks:
            - Block overlaps; enforce buffers; surface conditions for “ends near maintenance”.
          Acceptance:
            - tests/scheduling/test_conflicts.py: inspections/maintenance/seasonal pass.

      - title: Seasonal restriction enforcement (per product type)
        labels: [scheduling, compliance]
        body: |
          Paths:
            - apps/scheduling/seasonal_enforcer.py
          Acceptance:
            - Cases in tests/test_municipal_golden.py that assert seasonal conditions pass.

  - name: EPIC 6 — Fees/Taxes/Deposits at Checkout
    description: Municipal fee engine application and ledger reconciliation.
    issues:
      - title: Fee engine endpoint + breakdown
        labels: [finance, backend, api]
        estimate: 5
        body: |
          Paths:
            - pricing-service/fee_engine.py
            - api/fees/quote.py
          Tasks:
            - Compute city taxes (SF TOT 14%, PDX Lodging 11.5%, SEA Lodging 2% + B&O 0.44%), deposits, penalties.
          Acceptance:
            - tests/finance/test_fee_engine.py golden math; totals reconcile to payments ledger.

      - title: Checkout UI itemization
        labels: [frontend, finance, ui]
        body: |
          Paths:
            - apps/harborhomes/components/FeeBreakdown.tsx
          Acceptance:
            - Component shows line items + tooltips referencing city code; snapshot tests stable.

  - name: EPIC 7 — Monitoring, Alerts, & SLOs
    description: Wire dashboards and alerts for ingestion, onboarding, booking.
    issues:
      - title: Grafana panels for ETL, compliance verdicts, booking latency
        labels: [observability, grafana]
        body: |
          Paths:
            - grafana/dashboards/op_readiness.json
          Acceptance:
            - Panels show reg_manifest freshness, verdict counts, p95 booking confirm latency.

      - title: Alerts as code (Prometheus/Grafana)
        labels: [observability, alerts]
        body: |
          Paths:
            - monitoring/alerts_op_readiness.yaml
          Acceptance:
            - Alerts fire to Slack when: manifest stale >48h; booking p95 >2s for 10m; onboarding error rate >2%.

  - name: EPIC 8 — Docs & Runbooks
    description: Guides for admins and support to operate onboarding and compliance.
    issues:
      - title: Admin onboarding playbook
        labels: [docs, ops]
        body: |
          Paths:
            - RUNBOOK.md (new section: "Onboarding Ops")
            - DEVELOPER_ONBOARDING.md (admin quickstart)
          Acceptance:
            - Steps to verify a new host & maker end-to-end are documented with screenshots.

      - title: API reference updates & SDK regen
        labels: [docs, sdk]
        body: |
          Paths:
            - openapi.yaml
            - sdk/typescript/*
            - sdk/python/*
          Acceptance:
            - `npm run openapi:ts` and python client generation updated; compiled successfully in CI.

pipelines:
  - name: CI — Op Readiness
    on:
      - pull_request
    steps:
      - run: ruff check . && mypy .
      - run: pytest -q
      - run: npm run -w apps/harborhomes test
      - run: npm run -w apps/harborhomes test:e2e
      - run: k6 run load/k6_bookings.js || true
  - name: Nightly ETL & Freshness
    on:
      - schedule: "15 08 * * *"
    steps:
      - run: python -m etl.jobs.reg_refresh_worker --jurisdictions san_francisco,portland,seattle
      - run: python scripts/check_manifest_freshness.py --db "$STAGING_DB_URL" --max_age_hours 48

dependencies:
  - issue: "EPIC 2 — Host Onboarding (Business/Kitchen)"
    blocks:
      - "EPIC 4 — Compliance Kernel Bridge (Municipal Delta → Checkout)"
  - issue: "EPIC 1 — Data Ingestion & Synchronization"
    blocks:
      - "EPIC 7 — Monitoring, Alerts, & SLOs"
      - "EPIC 4 — Compliance Kernel Bridge (Municipal Delta → Checkout)"
completion_criteria:
  - "Golden municipal tests (≥30 scenarios) pass"
  - "ETL freshness < 48h for SF/PDX/SEA"
  - "Booking confirm calls policy kernel and fee engine; UI shows itemized fees"
  - "Host & Maker onboarding completeable via UI with documents validated"
  - "Grafana dashboards & alerts live; Sentry tracing active for onboarding + booking"
