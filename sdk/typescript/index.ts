/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/city/{city}/fees": {
    /**
     * List recurring and one-time fees for a city
     * @description Returns a curated list of fees associated with starting or maintaining a
     * business in the requested city. The endpoint supports filtering by
     * business type so that the returned fees reflect the relevant rules.
     */
    get: operations["listCityFees"];
  };
  "/city/{city}/requirements": {
    /**
     * Retrieve compliance requirements for a city
     * @description Provides the core municipal compliance requirements for a city, including
     * any prerequisite filings, required documentation, and due dates.
     */
    get: operations["listCityRequirements"];
  };
  "/requirements/estimate": {
    /**
     * Estimate the filings and fees required for a business scenario
     * @description Produces an estimate of the compliance requirements and associated fees for
     * a proposed business scenario. Use the `Idempotency-Key` header to make the
     * request safely retryable.
     */
    post: operations["createRequirementEstimate"];
  };
}

export interface webhooks {
  "requirement.status.updated": {
    /** A tracked requirement changed status */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RequirementStatusWebhook"];
        };
      };
      responses: {
        /** @description Acknowledged */
        200: {
          content: never;
        };
      };
    };
  };
  "requirement.due.soon": {
    /** A requirement has an upcoming due date */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RequirementDueWebhook"];
        };
      };
      responses: {
        /** @description Acknowledged */
        200: {
          content: never;
        };
      };
    };
  };
}

export interface components {
  schemas: {
    ErrorResponse: {
      /**
       * @description Machine-readable error code.
       * @example invalid_city
       */
      error: string;
      /**
       * @description Human-readable error message.
       * @example The requested city is not supported.
       */
      message: string;
      /** @description Additional structured details about the failure. */
      details?: {
        [key: string]: unknown;
      };
    };
    Fee: {
      /** Format: uuid */
      id: string;
      /** @description Short human readable name for the fee. */
      name: string;
      description?: string;
      /**
       * Format: float
       * @description Monetary amount in the provided currency.
       */
      amount: number;
      /**
       * @description ISO 4217 currency code.
       * @example USD
       */
      currency: string;
      /**
       * @description How often the fee is due.
       * @enum {string}
       */
      frequency?: "one-time" | "annual" | "quarterly" | "monthly";
    };
    FeeCollection: {
      city: string;
      businessType?: string | null;
      fees: components["schemas"]["Fee"][];
    };
    Requirement: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string;
      /** @enum {string} */
      status: "upcoming" | "due" | "filed" | "late";
      /** Format: date */
      dueDate?: string;
      dependencies?: string[];
    };
    RequirementCollection: {
      city: string;
      registrationStatus?: string | null;
      requirements: components["schemas"]["Requirement"][];
    };
    RequirementEstimateRequest: {
      /** @description City slug for the request. */
      city: string;
      /** @description Business classification used in estimating filings. */
      businessType: string;
      /**
       * Format: float
       * @description Estimated annual revenue in USD.
       */
      annualRevenue?: number;
      employeeCount?: number;
      /** @enum {string} */
      filingFrequencyPreference?: "automatic" | "manual";
    };
    RequirementEstimateResponse: {
      city: string;
      /** @example USD */
      currency: string;
      /** Format: float */
      totalEstimatedFees: number;
      assumptions?: string[];
      requirements: components["schemas"]["Requirement"][];
    };
    RequirementStatusPayload: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      status: "upcoming" | "due" | "filed" | "late";
      /** Format: date-time */
      occurredAt: string;
      city?: string;
      previousStatus?: string | null;
    };
    RequirementDuePayload: {
      /** Format: uuid */
      id: string;
      /** Format: date */
      dueDate: string;
      city: string;
      name?: string;
      daysUntilDue?: number;
    };
    RequirementStatusWebhook: {
      /** @enum {string} */
      event: "requirement.status.updated";
      data: components["schemas"]["RequirementStatusPayload"];
    };
    RequirementDueWebhook: {
      /** @enum {string} */
      event: "requirement.due.soon";
      data: components["schemas"]["RequirementDuePayload"];
    };
  };
  responses: never;
  parameters: {
    /** @description Slug identifier for the city (e.g., `san-francisco-ca`). */
    CityParam: string;
    /** @description Optional version override for the API. */
    ApiVersionHeader?: string;
    /** @description Ensures the request is processed only once. */
    IdempotencyKeyHeader?: string;
  };
  requestBodies: never;
  headers: {
    /** @description Unique identifier for the request, echoed back in the response. */
    "X-Request-Id": string;
    /** @description Idempotency key that allows safe request retries within 24 hours. */
    "Idempotency-Key": string;
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List recurring and one-time fees for a city
   * @description Returns a curated list of fees associated with starting or maintaining a
   * business in the requested city. The endpoint supports filtering by
   * business type so that the returned fees reflect the relevant rules.
   */
  listCityFees: {
    parameters: {
      query?: {
        /** @description Optional business classification used to tailor fee recommendations. */
        businessType?: string;
      };
      header?: {
        "Prep-Version"?: components["parameters"]["ApiVersionHeader"];
      };
      path: {
        city: components["parameters"]["CityParam"];
      };
    };
    responses: {
      /** @description Matching fees */
      200: {
        headers: {
          "X-Request-Id": components["headers"]["X-Request-Id"];
        };
        content: {
          "application/json": components["schemas"]["FeeCollection"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Retrieve compliance requirements for a city
   * @description Provides the core municipal compliance requirements for a city, including
   * any prerequisite filings, required documentation, and due dates.
   */
  listCityRequirements: {
    parameters: {
      query?: {
        /** @description Filter requirements by the company's current registration status. */
        registrationStatus?: "pre-registration" | "registered" | "delinquent";
      };
      header?: {
        "Prep-Version"?: components["parameters"]["ApiVersionHeader"];
      };
      path: {
        city: components["parameters"]["CityParam"];
      };
    };
    responses: {
      /** @description Requirements for the specified city */
      200: {
        headers: {
          "X-Request-Id": components["headers"]["X-Request-Id"];
        };
        content: {
          "application/json": components["schemas"]["RequirementCollection"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Estimate the filings and fees required for a business scenario
   * @description Produces an estimate of the compliance requirements and associated fees for
   * a proposed business scenario. Use the `Idempotency-Key` header to make the
   * request safely retryable.
   */
  createRequirementEstimate: {
    parameters: {
      header?: {
        "Idempotency-Key"?: components["parameters"]["IdempotencyKeyHeader"];
        "Prep-Version"?: components["parameters"]["ApiVersionHeader"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequirementEstimateRequest"];
      };
    };
    responses: {
      /** @description Estimate generated successfully */
      200: {
        headers: {
          "X-Request-Id": components["headers"]["X-Request-Id"];
        };
        content: {
          "application/json": components["schemas"]["RequirementEstimateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
