# This file was auto-generated by openapi-python-client.
from __future__ import annotations

from http import HTTPStatus
from typing import Any, Dict, Optional, Union

import httpx

from ...client import Client
from ...models.requirement_collection import RequirementCollection
from ...types import UNSET, Response, Unset, UnexpectedStatus


def _get_kwargs(
    city: str,
    *,
    client: Client,
    registration_status: Union[Unset, str] = UNSET,
    prep_version: Union[Unset, str] = UNSET,
) -> Dict[str, Any]:
    headers = client.get_headers()
    if not isinstance(prep_version, Unset) and prep_version is not UNSET:
        headers["Prep-Version"] = prep_version

    params: Dict[str, Any] = {}
    if (
        not isinstance(registration_status, Unset)
        and registration_status is not UNSET
        and registration_status is not None
    ):
        params["registrationStatus"] = registration_status

    return {
        "method": "get",
        "url": f"/city/{city}/requirements",
        "headers": headers,
        "cookies": client.get_cookies(),
        "timeout": client.get_timeout(),
        "params": params,
    }


def _parse_response(*, client: Client, response: httpx.Response) -> Optional[RequirementCollection]:
    if response.status_code == HTTPStatus.OK:
        return RequirementCollection.model_validate(response.json())
    if client.raise_on_unexpected_status:
        raise UnexpectedStatus(response.status_code, response.content)
    return None


def _build_response(*, client: Client, response: httpx.Response) -> Response[RequirementCollection]:
    return Response(
        status_code=HTTPStatus(response.status_code),
        content=response.content,
        headers=dict(response.headers),
        parsed=_parse_response(client=client, response=response),
    )


def sync_detailed(
    city: str,
    *,
    client: Client,
    registration_status: Union[Unset, str] = UNSET,
    prep_version: Union[Unset, str] = UNSET,
) -> Response[RequirementCollection]:
    """Retrieve compliance requirements for a city."""

    kwargs = _get_kwargs(
        city=city,
        client=client,
        registration_status=registration_status,
        prep_version=prep_version,
    )

    with httpx.Client(
        base_url=client.base_url,
        verify=client.verify_ssl,
        follow_redirects=client.follow_redirects,
    ) as _client:
        response = _client.request(**kwargs)

    return _build_response(client=client, response=response)


def sync(
    city: str,
    *,
    client: Client,
    registration_status: Union[Unset, str] = UNSET,
    prep_version: Union[Unset, str] = UNSET,
) -> Optional[RequirementCollection]:
    """Retrieve compliance requirements for a city."""

    return sync_detailed(
        city=city,
        client=client,
        registration_status=registration_status,
        prep_version=prep_version,
    ).parsed


async def asyncio_detailed(
    city: str,
    *,
    client: Client,
    registration_status: Union[Unset, str] = UNSET,
    prep_version: Union[Unset, str] = UNSET,
) -> Response[RequirementCollection]:
    """Retrieve compliance requirements for a city."""

    kwargs = _get_kwargs(
        city=city,
        client=client,
        registration_status=registration_status,
        prep_version=prep_version,
    )

    async with httpx.AsyncClient(
        base_url=client.base_url,
        verify=client.verify_ssl,
        follow_redirects=client.follow_redirects,
    ) as _client:
        response = await _client.request(**kwargs)

    return _build_response(client=client, response=response)


async def asyncio(
    city: str,
    *,
    client: Client,
    registration_status: Union[Unset, str] = UNSET,
    prep_version: Union[Unset, str] = UNSET,
) -> Optional[RequirementCollection]:
    """Retrieve compliance requirements for a city."""

    return (
        await asyncio_detailed(
            city=city,
            client=client,
            registration_status=registration_status,
            prep_version=prep_version,
        )
    ).parsed
