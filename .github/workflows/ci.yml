name: CI Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main', 'develop']

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: prepchef_test
  REDIS_URL: redis://localhost:6379/0
  NODE_ENV: test

jobs:
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit black isort
          pip install -r requirements.txt

      - name: Run Ruff linter
        run: ruff check .

      - name: Run Black formatter check
        run: black --check .

      - name: Run isort import sorter check
        run: isort --check-only .

      - name: Run mypy type checker
        run: mypy . --config-file mypy.ini || true

      - name: Run Bandit security linter
        run: bandit -r prep/ dol_reg_compliance_engine/ gdpr_ccpa_core/ -c .bandit.yml

  lint-node:
    name: Lint Node/TypeScript Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint || true

      - name: Run Prettier check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}" || true

  test-python:
    name: Python Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prepchef_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run pytest
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/prepchef_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/ -v --cov=prep --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: python
          fail_ci_if_error: false

  test-node:
    name: Node.js Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prepchef_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prepchef_test
          REDIS_URL: redis://localhost:6379/0
        run: npm test || true

  test-playwright:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    needs: [lint-node]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Playwright dependencies
        working-directory: prepchef/tests/e2e
        run: |
          npm install
          npx playwright install --with-deps

      - name: Run Playwright E2E suite
        working-directory: prepchef/tests/e2e
        env:
          BASE_URL: http://localhost:3000
        run: npm run test:ci

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-python, lint-node, test-python, test-node, test-playwright]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Python Compliance image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.compliance
          push: false
          tags: prepchef/python-compliance:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build main API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: prepchef/api:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [build-images]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "NODE_ENV=test" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@postgres:5432/prepchef" >> .env

      - name: Start docker-compose stack
        run: |
          docker-compose up -d postgres redis minio
          sleep 10

      - name: Wait for services to be healthy
        run: |
          timeout 60 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 2; done'

      - name: Run database migrations
        run: |
          docker-compose exec -T postgres psql -U postgres -d prepchef -c "SELECT 1" || true

      - name: Set up Node.js for E2E
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Playwright
        run: |
          npm install
          npx playwright install --with-deps chromium

      - name: Run Playwright E2E tests
        env:
          BASE_URL: http://localhost:3001
          API_URL: http://localhost:3000
        run: |
          npx playwright test || true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Collect docker-compose logs
        if: failure()
        run: docker-compose logs

      - name: Stop docker-compose stack
        if: always()
        run: docker-compose down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint-python, lint-node, test-python, test-node, build-images, e2e-tests, security-scan]
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.lint-python.result }}" != "success" ] || \
             [ "${{ needs.lint-node.result }}" != "success" ] || \
             [ "${{ needs.test-python.result }}" != "success" ] || \
             [ "${{ needs.test-node.result }}" != "success" ] || \
             [ "${{ needs.build-images.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All checks passed!"
