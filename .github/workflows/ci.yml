name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      OPA_URL: http://127.0.0.1:8181
    strategy:
      matrix:
        service:
          - apps/ingestion_service
          - apps/graph_service
          - apps/obligation_extractor
          - apps/formalizer
          - apps/policy_engine
          - apps/provenance_ledger
          - apps/zk_proofs
          - apps/monitor
          - apps/predictor
          - apps/twin
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -e .
      - name: Install OPA CLI
        run: |
          set -euo pipefail
          curl -L -o opa https://openpolicyagent.org/downloads/v0.59.0/opa_linux_amd64_static
          chmod +x opa
          ./opa version
      - name: Start OPA server
        run: |
          set -euo pipefail
          shopt -s nullglob
          bundles=(tests/policy/sf_bay_area/bundles/*)
          shopt -u nullglob
          if [ "${#bundles[@]}" -eq 0 ]; then
            bundles=(apps/policy/bundle/policies.rego)
          fi
          ./opa run --server --addr=127.0.0.1:8181 "${bundles[@]}" > opa.log 2>&1 &
          echo $! > opa.pid
          ready=0
          for _ in $(seq 1 30); do
            if curl -sf http://127.0.0.1:8181/health?plugins > /dev/null; then
              ready=1
              break
            fi
            sleep 1
          done
          if [ "$ready" -ne 1 ]; then
            echo "OPA server failed to start" >&2
            cat opa.log >&2 || true
            exit 1
          fi
      - name: Run pytest
        run: |
          pytest ${matrix.service}/tests --maxfail=1 -q
      - name: Run ruff
        run: ruff check ${matrix.service}
      - name: Run mypy
        run: mypy ${matrix.service}
      - name: Stop OPA server
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
        run: |
          if [ -f opa.pid ]; then
            pid="$(cat opa.pid)"
            kill "$pid" 2>/dev/null || true
            wait "$pid" 2>/dev/null || true
            if [ "${JOB_STATUS}" != "success" ] && [ -f opa.log ]; then
              echo 'OPA server logs:'
              cat opa.log
            fi
            rm -f opa.pid opa.log
          fi

  codex-contract:
    if: |
      contains(github.event.pull_request.labels.*.name, 'codex') ||
      contains(join(github.event.head_commit.modified, ' '), 'codex/') ||
      contains(join(github.event.head_commit.modified, ' '), 'apps/city_regulatory_service/') ||
      contains(join(github.event.head_commit.modified, ' '), 'apps/policy/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Setup
        run: make setup
      - name: Build policies
        run: make policy.build
      - name: Launch OPA
        run: make opa.up
      - name: DB migrate
        env: { DATABASE_URL: postgresql://prep:prep@localhost:5432/prep }
        run: |
          sudo service postgresql start
          psql -U postgres -c "CREATE DATABASE prep;" || true
          psql -U postgres -c "CREATE USER prep WITH PASSWORD 'prep';" || true
          psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE prep TO prep;" || true
          make db.migrate
      - name: Run tests
        env:
          OPA_URL: http://localhost:8181
          DATABASE_URL: postgresql://prep:prep@localhost:5432/prep
        run: make test
      - name: Verify readiness
        env:
          OPA_URL: http://localhost:8181
          DATABASE_URL: postgresql://prep:prep@localhost:5432/prep
        run: make codex-verify
